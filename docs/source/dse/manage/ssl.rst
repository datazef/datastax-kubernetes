SSL Certificates
================

.. note::
   This is in addition to all notes available on DataStax https://github.com/datastax/cass-operator

Pre-requisites
--------------
Before you start, make sure you have performed the following tasks:

* :doc:`../provision/create-datacenter`

Procedure
---------
Since version of cass-operator 1.4, the management of the certificates is done using the secrets interface. The keystore for internode encryption will be mounted on the /etc/encryption of each node.

* Retrive the list of secrets used inside the cass-operator:

.. code-block:: shell
   :emphasize-lines: 5, 6, 7

   $> kubectl get secrets -n cass-operator
   NAME                                 TYPE                                  DATA   AGE
   cass-operator-token-h74dg            kubernetes.io/service-account-token   3      2d3h
   cass-operator-webhook-config         Opaque                                2      2d3h
   cluster1-superuser                   Opaque                                2      2d3h
   dc1-ca-keystore                      Opaque                                2      2d3h
   dc1-keystore                         Opaque                                2      2d3h
   default-token-jzs9p                  kubernetes.io/service-account-token   3      2d3h
   grafana-admin-credentials            Opaque                                2      2d1h
   grafana-operator-token-xqz8l         kubernetes.io/service-account-token   3      2d1h
   grafana-serviceaccount-token-pkc6x   kubernetes.io/service-account-token   3      2d1h
   prometheus-k8s-token-flfpx           kubernetes.io/service-account-token   3      2d2h
   prometheus-operator-token-tgj5h      kubernetes.io/service-account-token   3      2d2h
   prometheus-prometheus-k8s            Opaque                                1      2d2h
   prometheus-token-nxwkd               kubernetes.io/service-account-token   3      2d2h

* Retrive cert and private key for the truststore:

.. code-block:: shell

   $> kubectl get secret -n cass-operator dc1-ca-keystore -o yaml
   apiVersion: v1
   data:
     cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZ4VENDQTYyZ0F3SUJBZ0lSQUxidXdGTllTTWVSYlNPTFNHVW5FY2t3RFFZSktvWklodmNOQVFFTEJRQXcKWURFeU1EQUdBMVVFQ2hNcFEyRnpjMkZ1WkhKaElFdDFZbVZ5Ym1WMFpYTWdUM0JsY21GMGIzSWdRbmtnUkdGMApZWE4wWVhneEtqQW9CZ05WQkFNVElXUmpNUzFqWVMxclpYbHpkRzl5WlM1allYTnpMVzl3WlhKaGRHOXlMbk4yCll6QWVGdzB5TURBNU1ERXhOak00TkRWYUZ3MHlNVEE1TURFeE5qTTRORFZhTUdBeE1qQXdCZ05WQkFvVEtVTmgKYzNOaGJtUnlZU0JMZFdKbGNtNWxkR1Z6SUU5d1pYSmhkRzl5SUVKNUlFUmhkR0Z6ZEdGNE1Tb3dLQVlEVlFRRApFeUZrWXpFdFkyRXRhMlY1YzNSdmNtVXVZMkZ6Y3kxdmNHVnlZWFJ2Y2k1emRtTXdnZ0lpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRRFI0VTMvMFduSWVKMXJiR3Y4QTJieVc4L3hvOFc4YitIRERwekMKd0FVUXUrVm5jSCtYWkl2V2p3ZjZwZnRRTmV1aUZ6UG40ZVFTTko4c3JSYlF3RXQvR0RNc2I0TnVmSzRuN1JNTApDT0pjNkNGWDE2UFpxK1E3K0tmbFFuV1M0M3IvSDd6cnVGa3RTVFJKQVRFbTREYVk1RVFtSlRjMWd0N0wxdHRSCjF4cG14TElPazNxY0NKUEhnUitBVC9IVHhIVEtTZGlNU29HeWE0VzI2dGwrTjRnSW9JaXlTZHhmZ0tqR3lWRUIKNjlMeU9nODVzOEVYaDBseUI5T1c0VU9oUEtLTjZsUGhUUGNkcVd6bG5mRm15ZTlLdmlqN3AyL1ZzWS85cEVkcQpVL1pZWXJ1T24zWEpMQkRyYWhVem90WmVMQm9haEloUHJRbmFmTlQvR2l4UHhDNml5N3VGMTg1SnIzQm9EakRFCkhTWmFhVHpyZUhqS2RGcjY0VHZyTXJkRUYzcU8zYU1JTlgzZ2Nub1J2c0VKdVVIUUg5NjM3SSsxYW9mVi96WVoKOVg2Q0RyWEQ3VnRTQVZ4QzFhcENaTmhwNWE4RWJlZ1JHcW4vZ25QeVpyNXd4dUloRzYwclRVbHgvTlc5c1BadAoxeWpldjFHSUdPTHJVMXpkMmRFWW53QlZGd0lOVHJWcmNoeWsrRkNhVUNmTmtYODBFQmVCaThaRGI1WG9DSTVJCjEzUHFMdjV2OFV2SFhwZDhaVGdzNjV3WHdaNHRYMTRKSVY4Z3ZhQmRwSHZIeDI4MkdoeEI4blFHd2hMRzdRcUEKeGV1RC9VWnlNQi9pTEtWaVJGTEdkV2w3VjJTQ2pGcFk4TzRuNU5WbUdab2JmT1Y5MmZWZGpVYTZTcWliUmhDYgpwUlRlSXdJREFRQUJvM293ZURBT0JnTlZIUThCQWY4RUJBTUNBcVF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVICkF3RXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QkFCZ05WSFJFRU9UQTNnalZqWVhOellXNWtjbUZrWVhSaFkyVnUKZEdWeUxYZGxZbWh2YjJzdGMyVnlkbWxqWlM1allYTnpMVzl3WlhKaGRHOXlMbk4yWXpBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FnRUFteEdXSTBjdmgxWWNrK2tXUWVDZjZ2SlBrWDFRV2E4Q2x0bU5VMGd3UTJITzM3aXFuaUJuClE2V29FZjRjTndUWTdOTlhSUjM3bVUrcU9ndEFQYWZIbGpVRVNmMUZORXRYVC9vTzBSUi84QnNQT2ZhNVk4cVoKdUc5MUpOb2RxOUVvSW40eEVRR2gydDJLOTNaTlFPd00rdlAzTjhJVlJwenZFOGFjQlV2NkdHd3NGMGpZT3BDZQpmb0NFSGZ2djFMNENOcEtnYzBDV2pVVlFVQUlJMUczNkduSDlkZjVTTGlnU1JHVTE2c3Z0SmJtK2hnVUZVTjF6CjJmSllZb3VOWWZjajBpSjN3alBsOFZ2elR1QnZxSmpmRVgwUjh5cHRjYW93dENTWlo0aHVvRitPaDJ0WFpFYm4KOVpBOEFjRXkyRGxFek9ySmVyZ0c1dVpWUXViTHMxWWJuZHRtdWRxZ2N0N3ZGZEEvVkNZcHdYaFN5cmRFSnBCbAo1emh5ejlPZzB4M0wvcmt2M1V6UU1JcUVuTTFsejdnVm5CYk94SUZMWFF2bHpYY0ZVTE45TnhIZDRPZG1PSWVzCjFMVnRSYldQWEJwOVdyMFVHRGxmRUdsNDM5SGljY0t3QVFTeFVQMVJYeS9DVE5hOVNsSmVMV3ViQVM1QTgrY0QKV0p4ank5YXZXTzVmRllvaThzQnVvUlhmNnRSUkFsL2xnNWdiREloMU05dG5BVUt2eG84bWZRdUhBUmdhTVUvcQpNVEtZUzJvQy9UT3VxZDNSZ1ZUdEp5bGh1eU5ibEVJQ3BvL2lLYUFwdFBMMDlyNUhsTXEvcjhkMFpVVXFCYUtTCm13OUVxZnZaSkczeFdXT0tYUTVDUXJyYmJZNWRjMmVTR1ZqcGQvRmlZQldZSDNQTG9aQ3FMYnc9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
     key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRRFI0VTMvMFduSWVKMXIKYkd2OEEyYnlXOC94bzhXOGIrSEREcHpDd0FVUXUrVm5jSCtYWkl2V2p3ZjZwZnRRTmV1aUZ6UG40ZVFTTko4cwpyUmJRd0V0L0dETXNiNE51Zks0bjdSTUxDT0pjNkNGWDE2UFpxK1E3K0tmbFFuV1M0M3IvSDd6cnVGa3RTVFJKCkFURW00RGFZNUVRbUpUYzFndDdMMXR0UjF4cG14TElPazNxY0NKUEhnUitBVC9IVHhIVEtTZGlNU29HeWE0VzIKNnRsK040Z0lvSWl5U2R4ZmdLakd5VkVCNjlMeU9nODVzOEVYaDBseUI5T1c0VU9oUEtLTjZsUGhUUGNkcVd6bApuZkZteWU5S3ZpajdwMi9Wc1kvOXBFZHFVL1pZWXJ1T24zWEpMQkRyYWhVem90WmVMQm9haEloUHJRbmFmTlQvCkdpeFB4QzZpeTd1RjE4NUpyM0JvRGpERUhTWmFhVHpyZUhqS2RGcjY0VHZyTXJkRUYzcU8zYU1JTlgzZ2Nub1IKdnNFSnVVSFFIOTYzN0krMWFvZlYvellaOVg2Q0RyWEQ3VnRTQVZ4QzFhcENaTmhwNWE4RWJlZ1JHcW4vZ25QeQpacjV3eHVJaEc2MHJUVWx4L05XOXNQWnQxeWpldjFHSUdPTHJVMXpkMmRFWW53QlZGd0lOVHJWcmNoeWsrRkNhClVDZk5rWDgwRUJlQmk4WkRiNVhvQ0k1STEzUHFMdjV2OFV2SFhwZDhaVGdzNjV3WHdaNHRYMTRKSVY4Z3ZhQmQKcEh2SHgyODJHaHhCOG5RR3doTEc3UXFBeGV1RC9VWnlNQi9pTEtWaVJGTEdkV2w3VjJTQ2pGcFk4TzRuNU5WbQpHWm9iZk9WOTJmVmRqVWE2U3FpYlJoQ2JwUlRlSXdJREFRQUJBb0lDQUdYbFp3TU9YcmRQcDgzaHc4T0V1MVJyCk10ZjBWU29aZjVnOTNlbkhaQzR0cTBDL0k1TVM0N2wxazhBakdaSmx1MUxreFBTTmZUZEJpUTRkc3ZnQ2hDVGUKVU9uLzhlV1FidFUvaW9GTy9PZHlZODNNQ2ViQ1IzcStUSFZJQU9FaHhETmM2MUhlSEoyWjd1S0t5NXcrT3dPYgp2Mkp0cXhJMXlZbFpkUDJVMjJLTm1JenZHUlhzTENNdUUyY3VhUkFSVDBwdTg4Mlkxc01TNU1aYjJ1QW1nY3IrCmRaOXBzSzVGUHF2VVRab0xMazBmMXdpQ3R2cC9XaThja2FPdEZqS1B4N1B5MG1xTi9XUFBQK2x5OXlLYVk2ejgKQ2RXMEF0M1M2VCtScElLQTVSY2dTRU1FTkNGSlhhV055V0ZhYTQwcENEdGJvUHBkM216UE1uSHYrUmQ0L2RKMgoxQTc1SjRSM3Z0ZjdZREd5ZU9iejk3RGQ2eVYwRDBKRGRqTE9TVm55SXRXeVF4cC9iZk8rcXlrTTZqKytsNGc5Cm9QeVl4RW1sVG9UNG8wU050YzA4dm90N1BmTnBsYlBoYUtLcXIrT0lLc2NWM01EOWF4OWlnY3p5aXgrVmprZTEKRCsveWZDVUdQRG1hL1o0U1grTHk0ZnZMMitHdEozV1dVRU45c1Q3ZDFjcjJDZjZTeWFZcFNUMlNBMDEraDBkZApCeXYweHVkb014ajFxMzQrMnFmR1NsWFE1NlFma1BYMFpqVkQwRE0vYXNveTZIWFZzR2NONjY5M0J3Snc5WVZ0ClRSWlI2YUYzTzAwTGQ1L0VCNUVXZGQ4bHVUOTVyL2hRQmUxZkhSM3ROR09UZmduNW95ZEs3ZEJjdERQTnMwVWoKUXRBOGYwZHpsQ09UTldMR3pKV2hBb0lCQVFEcWU3eW00aDhPYXlJbXZKaU9XVGE5OXhEZFpWTVVGUEh3R0E4cgpiaWV0L0RncGxzT3JpVXBzUDJpSWtldUxPZjVvYno5Uytqc2tKb2p5VWRZZkVaaHBQQUdnRzRZNEIwVzk4ZFBBCjkrVTdINFNsUksrU0l1SjVjaEkvUDRSZU14V2FhUFBsMEtHZVg2WkJ3aXVkZDNPWkZwQkE1UEgxRkpVRHNmclQKNCsreWI4YUlKWVZsUmtWRUFPN2tPcEtDVEhiMjVxZGZKVUpuRzBjVjZ3RWZaQmhwWHFERy96cFAwWDVqZXB0NQpCQWFyTDA4aGZaeTNhbjI5R3VTWURYN3VoSFN6TGszSFJncEhaM1ZseVhsY3ZMY2FxT044ZWRvckFGaXRJWVBECnhodXJWYURyNE0xL1pmOEQ5UU83bXhLNm1OK1EzR3VseFJDUm9NdkxmY2h5WXNSckFvSUJBUURsSTV4NnBtRngKVUpWayszbWc1a05JS1BhQytJaSt4Zm5id0MrN2pzRFN3Z2w4eEdGN3RmYm9DTDlTSCtQWFhoQWtiZlRvcnNVcgpDZ3p1czdrdmFKL3RQdHk1eW9RSndPTDNtUDBlc3ZvNi90dkdHTmVjaTNPZ2EwTnJpOWdNTlBicHdHY1VlSnZUCnZnbTdFTmxLNlVzemxDeVBrUllsenQ0M1FFeDFpOStseE5pQWRiSmJucVFxam5mS04wbXdHM0JqUFYwUUxCVGgKbE8zVHNLOWd0Yk9zVi9XeHh5VGZHZ0tJbmtuNEM1aG5nSG13TDMzQ1pJZjdWWDR0RDRLQTVZNElCSUJFL2FiKwpmQnFOczRyWlpQU1ZNUUhXLzVwbVNSY3NBVCtRVXlZc3JOUldFaGk2eVppdWdFcVlpRnJzVGp5ZkwvMzJZUU9CCnJkRkJEZ0YxckhzcEFvSUJBRW1GbE1ocTNEd0VJWWd0MkZQQjYyVXpBNm0zckkzK1owSFYrV092dldkVFR6VFQKSGZVNkxnaTA5UXpsWEFxaW0zK1phaXlWWTFmWmNWVXhqY2JlR0lEZW5NL2I4WUM5M3dOSXdSR2ZhTlBaOVJodwo2ZkFUV2hta1I4NW5GeFVHUlg3TjY3T2ljQnFkZVI3alNCT3VzYU5Ock50OExkV2ZwMzJxSDdDeXBxUzNZWE9zCitCK2lJZlBKcXg0S3M0ZUJmRWU4V0x4L2pVdVJCUC85V0xQRUNkZDRJVWRrSForTFcyckx0ZFlEQ2loQXhEb0gKRGMyQTZYNFM0WncvbHc0b29BTFN3UFo3b3B0eStCOTdSYjlyT0twMlRDWHFleHJDbUF0cEY4eVo0SEVmZno2VwpsVGlkL1pEN0VUbVF6UldPKzRLTGFvRm13ZVEzbTg3cFdLRnRFSk1DZ2dFQUlGMlVWN3F5bnRmY0VrUjNIS1FKCnN1S2VWMGVWd1NTanMwZUZObi9tZXA2UHlvRE9xRE8rcVcyNjRIWENzQVFJVWF6NlgvZDN3Q21PUkJVOHZoYVEKS0dtdHNjeUtNL3A3MUs5V2FZU3NWYkwwQmhveU1sbDhQcGVJRVdQU1kzOER0V2JJNkpwVW9HY0NadHJ0Wm1obgpoK1NSR3NKS2w1S056czRWUHJGQUtPRVNGNnNJUTJxNEU0N0dHdGtPWG9LeHNFTFZwMWdpcHU1clhYQmloVTJGCkVIM29KWEZVb3ZMQWt0MlE0eWw0SUg2RU1iK3ppc2E2Y21UVUNyZGJIcXZPRVJIWnNHVUh0b0IvRzY3Vm1QbHEKbHJ3eVgxVUJVUnRYMjQ1ZGxSdzVreXZpWGpuMkprUWRmZUIvS09aeHVWa2Z0UGlKYmNpc1B4LzNJN0kvd0loWgphUUtDQVFFQXdnVUhNZlZFcEVQb2d1SmJzRHcxZElJNmxISVVQaVdrOGU5cTM5czRSSHkxZllvSzJwSG9JQnpyCjFQRnhPUVNSYmU1Z2x4T0lZVUIwNDVVVkRzaCtNaHVNUFE5dG4zVjVsb3BOejFJK1NuRzE3MGx2Q05yRXBRb0sKaURsQUZKMmxmQ282T0h0NEVITkQrTytFNXVBb2ZjbXRZNlFjK1RCY1lhdXArUURwbmo1OWhmSFRhSS9rOEdJVgpDQW5jeGpjdTBGL1lTNjVoK1VvTXVEaUxaaEFMYjc3M2ljeG9MYjg4b2hWOTVDTzJ6bk1nbkx5OFlNUWhwdlJ2CkdURFBBYiswUlE3ZUVFRGsvcDlNT09CbGY3RGEySXk1TDlUSGNuYUpGRjNZQUlybk5Qb1dBVStYNDR1dDlHcFYKVHN1dCtsZ1c5ei94bmhvbEEyZ0NTQXkzRVNxejJnPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
   kind: Secret
   metadata:
     creationTimestamp: "2020-09-01T16:38:47Z"
     name: dc1-ca-keystore
     namespace: cass-operator
     resourceVersion: "7183"
     selfLink: /api/v1/namespaces/cass-operator/secrets/dc1-ca-keystore
     uid: 9a390f09-5f48-460b-8e3f-67503e0a423e
   type: Opaque 

.. note::
   Once the cert has been retrieved, it's possible to decode it's content usiing the base64 --decode command.

* Change the keystore:

.. code-block:: shell

   $> kubectl edit secret -n cass-operator dc1-keystore
   

Post-requisites
---------------
 


